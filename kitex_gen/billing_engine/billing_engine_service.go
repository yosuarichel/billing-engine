// Code generated by thriftgo (0.4.3). DO NOT EDIT.

package billing_engine

import (
	"context"
	"fmt"
	"github.com/yosuarichel/billing-engine/kitex_gen/base"
	"github.com/yosuarichel/billing-engine/kitex_gen/billing_engine/data/billing_data"
	"github.com/yosuarichel/billing-engine/kitex_gen/billing_engine/data/loan_schedule_data"
	"github.com/yosuarichel/billing-engine/kitex_gen/billing_engine/data/payment_data"
)

type IsDelinquentRequest struct {
	LoanId  *string    `thrift:"loan_id,1,optional" frugal:"1,optional,string" json:"loan_id,omitempty"`
	Version *int32     `thrift:"version,100,optional" frugal:"100,optional,i32" json:"version,omitempty"`
	Base    *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" json:"Base,omitempty"`
}

func NewIsDelinquentRequest() *IsDelinquentRequest {
	return &IsDelinquentRequest{}
}

func (p *IsDelinquentRequest) InitDefault() {
}

var IsDelinquentRequest_LoanId_DEFAULT string

func (p *IsDelinquentRequest) GetLoanId() (v string) {
	if !p.IsSetLoanId() {
		return IsDelinquentRequest_LoanId_DEFAULT
	}
	return *p.LoanId
}

var IsDelinquentRequest_Version_DEFAULT int32

func (p *IsDelinquentRequest) GetVersion() (v int32) {
	if !p.IsSetVersion() {
		return IsDelinquentRequest_Version_DEFAULT
	}
	return *p.Version
}

var IsDelinquentRequest_Base_DEFAULT *base.Base

func (p *IsDelinquentRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return IsDelinquentRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *IsDelinquentRequest) SetLoanId(val *string) {
	p.LoanId = val
}
func (p *IsDelinquentRequest) SetVersion(val *int32) {
	p.Version = val
}
func (p *IsDelinquentRequest) SetBase(val *base.Base) {
	p.Base = val
}

func (p *IsDelinquentRequest) IsSetLoanId() bool {
	return p.LoanId != nil
}

func (p *IsDelinquentRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *IsDelinquentRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *IsDelinquentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsDelinquentRequest(%+v)", *p)
}

var fieldIDToName_IsDelinquentRequest = map[int16]string{
	1:   "loan_id",
	100: "version",
	255: "Base",
}

type IsDelinquentResponse struct {
	IsDelinquent *bool          `thrift:"is_delinquent,1,optional" frugal:"1,optional,bool" json:"is_delinquent,omitempty"`
	BaseResp     *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" json:"BaseResp"`
}

func NewIsDelinquentResponse() *IsDelinquentResponse {
	return &IsDelinquentResponse{}
}

func (p *IsDelinquentResponse) InitDefault() {
}

var IsDelinquentResponse_IsDelinquent_DEFAULT bool

func (p *IsDelinquentResponse) GetIsDelinquent() (v bool) {
	if !p.IsSetIsDelinquent() {
		return IsDelinquentResponse_IsDelinquent_DEFAULT
	}
	return *p.IsDelinquent
}

var IsDelinquentResponse_BaseResp_DEFAULT *base.BaseResp

func (p *IsDelinquentResponse) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return IsDelinquentResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *IsDelinquentResponse) SetIsDelinquent(val *bool) {
	p.IsDelinquent = val
}
func (p *IsDelinquentResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *IsDelinquentResponse) IsSetIsDelinquent() bool {
	return p.IsDelinquent != nil
}

func (p *IsDelinquentResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *IsDelinquentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("IsDelinquentResponse(%+v)", *p)
}

var fieldIDToName_IsDelinquentResponse = map[int16]string{
	1:   "is_delinquent",
	255: "BaseResp",
}

type CreateCustomerRequest struct {
	Name        string     `thrift:"name,1,required" frugal:"1,required,string" json:"name"`
	PhoneNumber string     `thrift:"phone_number,2,required" frugal:"2,required,string" json:"phone_number"`
	Version     *int32     `thrift:"version,100,optional" frugal:"100,optional,i32" json:"version,omitempty"`
	Base        *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" json:"Base,omitempty"`
}

func NewCreateCustomerRequest() *CreateCustomerRequest {
	return &CreateCustomerRequest{}
}

func (p *CreateCustomerRequest) InitDefault() {
}

func (p *CreateCustomerRequest) GetName() (v string) {
	return p.Name
}

func (p *CreateCustomerRequest) GetPhoneNumber() (v string) {
	return p.PhoneNumber
}

var CreateCustomerRequest_Version_DEFAULT int32

func (p *CreateCustomerRequest) GetVersion() (v int32) {
	if !p.IsSetVersion() {
		return CreateCustomerRequest_Version_DEFAULT
	}
	return *p.Version
}

var CreateCustomerRequest_Base_DEFAULT *base.Base

func (p *CreateCustomerRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return CreateCustomerRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateCustomerRequest) SetName(val string) {
	p.Name = val
}
func (p *CreateCustomerRequest) SetPhoneNumber(val string) {
	p.PhoneNumber = val
}
func (p *CreateCustomerRequest) SetVersion(val *int32) {
	p.Version = val
}
func (p *CreateCustomerRequest) SetBase(val *base.Base) {
	p.Base = val
}

func (p *CreateCustomerRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *CreateCustomerRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateCustomerRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCustomerRequest(%+v)", *p)
}

var fieldIDToName_CreateCustomerRequest = map[int16]string{
	1:   "name",
	2:   "phone_number",
	100: "version",
	255: "Base",
}

type CreateCustomerResponse struct {
	CustomerId *string        `thrift:"customer_id,1,optional" frugal:"1,optional,string" json:"customer_id,omitempty"`
	BaseResp   *base.BaseResp `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" json:"BaseResp"`
}

func NewCreateCustomerResponse() *CreateCustomerResponse {
	return &CreateCustomerResponse{}
}

func (p *CreateCustomerResponse) InitDefault() {
}

var CreateCustomerResponse_CustomerId_DEFAULT string

func (p *CreateCustomerResponse) GetCustomerId() (v string) {
	if !p.IsSetCustomerId() {
		return CreateCustomerResponse_CustomerId_DEFAULT
	}
	return *p.CustomerId
}

var CreateCustomerResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateCustomerResponse) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateCustomerResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateCustomerResponse) SetCustomerId(val *string) {
	p.CustomerId = val
}
func (p *CreateCustomerResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *CreateCustomerResponse) IsSetCustomerId() bool {
	return p.CustomerId != nil
}

func (p *CreateCustomerResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateCustomerResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateCustomerResponse(%+v)", *p)
}

var fieldIDToName_CreateCustomerResponse = map[int16]string{
	1:   "customer_id",
	255: "BaseResp",
}

type CreateLoanRequest struct {
	CustomerId string     `thrift:"customer_id,1,required" frugal:"1,required,string" json:"customer_id"`
	Principal  int64      `thrift:"principal,2,required" frugal:"2,required,i64" json:"principal"`
	TermWeeks  int32      `thrift:"term_weeks,3,required" frugal:"3,required,i32" json:"term_weeks"`
	Version    *int32     `thrift:"version,100,optional" frugal:"100,optional,i32" json:"version,omitempty"`
	Base       *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" json:"Base,omitempty"`
}

func NewCreateLoanRequest() *CreateLoanRequest {
	return &CreateLoanRequest{}
}

func (p *CreateLoanRequest) InitDefault() {
}

func (p *CreateLoanRequest) GetCustomerId() (v string) {
	return p.CustomerId
}

func (p *CreateLoanRequest) GetPrincipal() (v int64) {
	return p.Principal
}

func (p *CreateLoanRequest) GetTermWeeks() (v int32) {
	return p.TermWeeks
}

var CreateLoanRequest_Version_DEFAULT int32

func (p *CreateLoanRequest) GetVersion() (v int32) {
	if !p.IsSetVersion() {
		return CreateLoanRequest_Version_DEFAULT
	}
	return *p.Version
}

var CreateLoanRequest_Base_DEFAULT *base.Base

func (p *CreateLoanRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return CreateLoanRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *CreateLoanRequest) SetCustomerId(val string) {
	p.CustomerId = val
}
func (p *CreateLoanRequest) SetPrincipal(val int64) {
	p.Principal = val
}
func (p *CreateLoanRequest) SetTermWeeks(val int32) {
	p.TermWeeks = val
}
func (p *CreateLoanRequest) SetVersion(val *int32) {
	p.Version = val
}
func (p *CreateLoanRequest) SetBase(val *base.Base) {
	p.Base = val
}

func (p *CreateLoanRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *CreateLoanRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *CreateLoanRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateLoanRequest(%+v)", *p)
}

var fieldIDToName_CreateLoanRequest = map[int16]string{
	1:   "customer_id",
	2:   "principal",
	3:   "term_weeks",
	100: "version",
	255: "Base",
}

type CreateLoanResponse struct {
	LoanId      *string                                       `thrift:"loan_id,1,optional" frugal:"1,optional,string" json:"loan_id,omitempty"`
	CustomerId  *string                                       `thrift:"customer_id,2,optional" frugal:"2,optional,string" json:"customer_id,omitempty"`
	Principal   *int64                                        `thrift:"principal,3,optional" frugal:"3,optional,i64" json:"principal,omitempty"`
	TotalAmount *int64                                        `thrift:"total_amount,4,optional" frugal:"4,optional,i64" json:"total_amount,omitempty"`
	TermWeeks   *int32                                        `thrift:"term_weeks,5,optional" frugal:"5,optional,i32" json:"term_weeks,omitempty"`
	StartDate   *int64                                        `thrift:"start_date,6,optional" frugal:"6,optional,i64" json:"start_date,omitempty"`
	Status      *string                                       `thrift:"status,7,optional" frugal:"7,optional,string" json:"status,omitempty"`
	Schedules   []*loan_schedule_data.LoanScheduleSummaryData `thrift:"schedules,8,optional" frugal:"8,optional,list<loan_schedule_data.LoanScheduleSummaryData>" json:"schedules,omitempty"`
	BaseResp    *base.BaseResp                                `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" json:"BaseResp"`
}

func NewCreateLoanResponse() *CreateLoanResponse {
	return &CreateLoanResponse{}
}

func (p *CreateLoanResponse) InitDefault() {
}

var CreateLoanResponse_LoanId_DEFAULT string

func (p *CreateLoanResponse) GetLoanId() (v string) {
	if !p.IsSetLoanId() {
		return CreateLoanResponse_LoanId_DEFAULT
	}
	return *p.LoanId
}

var CreateLoanResponse_CustomerId_DEFAULT string

func (p *CreateLoanResponse) GetCustomerId() (v string) {
	if !p.IsSetCustomerId() {
		return CreateLoanResponse_CustomerId_DEFAULT
	}
	return *p.CustomerId
}

var CreateLoanResponse_Principal_DEFAULT int64

func (p *CreateLoanResponse) GetPrincipal() (v int64) {
	if !p.IsSetPrincipal() {
		return CreateLoanResponse_Principal_DEFAULT
	}
	return *p.Principal
}

var CreateLoanResponse_TotalAmount_DEFAULT int64

func (p *CreateLoanResponse) GetTotalAmount() (v int64) {
	if !p.IsSetTotalAmount() {
		return CreateLoanResponse_TotalAmount_DEFAULT
	}
	return *p.TotalAmount
}

var CreateLoanResponse_TermWeeks_DEFAULT int32

func (p *CreateLoanResponse) GetTermWeeks() (v int32) {
	if !p.IsSetTermWeeks() {
		return CreateLoanResponse_TermWeeks_DEFAULT
	}
	return *p.TermWeeks
}

var CreateLoanResponse_StartDate_DEFAULT int64

func (p *CreateLoanResponse) GetStartDate() (v int64) {
	if !p.IsSetStartDate() {
		return CreateLoanResponse_StartDate_DEFAULT
	}
	return *p.StartDate
}

var CreateLoanResponse_Status_DEFAULT string

func (p *CreateLoanResponse) GetStatus() (v string) {
	if !p.IsSetStatus() {
		return CreateLoanResponse_Status_DEFAULT
	}
	return *p.Status
}

var CreateLoanResponse_Schedules_DEFAULT []*loan_schedule_data.LoanScheduleSummaryData

func (p *CreateLoanResponse) GetSchedules() (v []*loan_schedule_data.LoanScheduleSummaryData) {
	if !p.IsSetSchedules() {
		return CreateLoanResponse_Schedules_DEFAULT
	}
	return p.Schedules
}

var CreateLoanResponse_BaseResp_DEFAULT *base.BaseResp

func (p *CreateLoanResponse) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return CreateLoanResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *CreateLoanResponse) SetLoanId(val *string) {
	p.LoanId = val
}
func (p *CreateLoanResponse) SetCustomerId(val *string) {
	p.CustomerId = val
}
func (p *CreateLoanResponse) SetPrincipal(val *int64) {
	p.Principal = val
}
func (p *CreateLoanResponse) SetTotalAmount(val *int64) {
	p.TotalAmount = val
}
func (p *CreateLoanResponse) SetTermWeeks(val *int32) {
	p.TermWeeks = val
}
func (p *CreateLoanResponse) SetStartDate(val *int64) {
	p.StartDate = val
}
func (p *CreateLoanResponse) SetStatus(val *string) {
	p.Status = val
}
func (p *CreateLoanResponse) SetSchedules(val []*loan_schedule_data.LoanScheduleSummaryData) {
	p.Schedules = val
}
func (p *CreateLoanResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *CreateLoanResponse) IsSetLoanId() bool {
	return p.LoanId != nil
}

func (p *CreateLoanResponse) IsSetCustomerId() bool {
	return p.CustomerId != nil
}

func (p *CreateLoanResponse) IsSetPrincipal() bool {
	return p.Principal != nil
}

func (p *CreateLoanResponse) IsSetTotalAmount() bool {
	return p.TotalAmount != nil
}

func (p *CreateLoanResponse) IsSetTermWeeks() bool {
	return p.TermWeeks != nil
}

func (p *CreateLoanResponse) IsSetStartDate() bool {
	return p.StartDate != nil
}

func (p *CreateLoanResponse) IsSetStatus() bool {
	return p.Status != nil
}

func (p *CreateLoanResponse) IsSetSchedules() bool {
	return p.Schedules != nil
}

func (p *CreateLoanResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *CreateLoanResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CreateLoanResponse(%+v)", *p)
}

var fieldIDToName_CreateLoanResponse = map[int16]string{
	1:   "loan_id",
	2:   "customer_id",
	3:   "principal",
	4:   "total_amount",
	5:   "term_weeks",
	6:   "start_date",
	7:   "status",
	8:   "schedules",
	255: "BaseResp",
}

type GetOutstandingRequest struct {
	LoanId  *string    `thrift:"loan_id,1,optional" frugal:"1,optional,string" json:"loan_id,omitempty"`
	Version *int32     `thrift:"version,100,optional" frugal:"100,optional,i32" json:"version,omitempty"`
	Base    *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" json:"Base,omitempty"`
}

func NewGetOutstandingRequest() *GetOutstandingRequest {
	return &GetOutstandingRequest{}
}

func (p *GetOutstandingRequest) InitDefault() {
}

var GetOutstandingRequest_LoanId_DEFAULT string

func (p *GetOutstandingRequest) GetLoanId() (v string) {
	if !p.IsSetLoanId() {
		return GetOutstandingRequest_LoanId_DEFAULT
	}
	return *p.LoanId
}

var GetOutstandingRequest_Version_DEFAULT int32

func (p *GetOutstandingRequest) GetVersion() (v int32) {
	if !p.IsSetVersion() {
		return GetOutstandingRequest_Version_DEFAULT
	}
	return *p.Version
}

var GetOutstandingRequest_Base_DEFAULT *base.Base

func (p *GetOutstandingRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return GetOutstandingRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *GetOutstandingRequest) SetLoanId(val *string) {
	p.LoanId = val
}
func (p *GetOutstandingRequest) SetVersion(val *int32) {
	p.Version = val
}
func (p *GetOutstandingRequest) SetBase(val *base.Base) {
	p.Base = val
}

func (p *GetOutstandingRequest) IsSetLoanId() bool {
	return p.LoanId != nil
}

func (p *GetOutstandingRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *GetOutstandingRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *GetOutstandingRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOutstandingRequest(%+v)", *p)
}

var fieldIDToName_GetOutstandingRequest = map[int16]string{
	1:   "loan_id",
	100: "version",
	255: "Base",
}

type GetOutstandingResponse struct {
	Data     *billing_data.OutstandingData `thrift:"data,1,optional" frugal:"1,optional,billing_data.OutstandingData" json:"data,omitempty"`
	BaseResp *base.BaseResp                `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" json:"BaseResp"`
}

func NewGetOutstandingResponse() *GetOutstandingResponse {
	return &GetOutstandingResponse{}
}

func (p *GetOutstandingResponse) InitDefault() {
}

var GetOutstandingResponse_Data_DEFAULT *billing_data.OutstandingData

func (p *GetOutstandingResponse) GetData() (v *billing_data.OutstandingData) {
	if !p.IsSetData() {
		return GetOutstandingResponse_Data_DEFAULT
	}
	return p.Data
}

var GetOutstandingResponse_BaseResp_DEFAULT *base.BaseResp

func (p *GetOutstandingResponse) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return GetOutstandingResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *GetOutstandingResponse) SetData(val *billing_data.OutstandingData) {
	p.Data = val
}
func (p *GetOutstandingResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *GetOutstandingResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *GetOutstandingResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *GetOutstandingResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("GetOutstandingResponse(%+v)", *p)
}

var fieldIDToName_GetOutstandingResponse = map[int16]string{
	1:   "data",
	255: "BaseResp",
}

type MakePaymentRequest struct {
	LoanId  *string    `thrift:"loan_id,1,optional" frugal:"1,optional,string" json:"loan_id,omitempty"`
	Amount  *int64     `thrift:"amount,2,optional" frugal:"2,optional,i64" json:"amount,omitempty"`
	Version *int32     `thrift:"version,100,optional" frugal:"100,optional,i32" json:"version,omitempty"`
	Base    *base.Base `thrift:"Base,255,optional" frugal:"255,optional,base.Base" json:"Base,omitempty"`
}

func NewMakePaymentRequest() *MakePaymentRequest {
	return &MakePaymentRequest{}
}

func (p *MakePaymentRequest) InitDefault() {
}

var MakePaymentRequest_LoanId_DEFAULT string

func (p *MakePaymentRequest) GetLoanId() (v string) {
	if !p.IsSetLoanId() {
		return MakePaymentRequest_LoanId_DEFAULT
	}
	return *p.LoanId
}

var MakePaymentRequest_Amount_DEFAULT int64

func (p *MakePaymentRequest) GetAmount() (v int64) {
	if !p.IsSetAmount() {
		return MakePaymentRequest_Amount_DEFAULT
	}
	return *p.Amount
}

var MakePaymentRequest_Version_DEFAULT int32

func (p *MakePaymentRequest) GetVersion() (v int32) {
	if !p.IsSetVersion() {
		return MakePaymentRequest_Version_DEFAULT
	}
	return *p.Version
}

var MakePaymentRequest_Base_DEFAULT *base.Base

func (p *MakePaymentRequest) GetBase() (v *base.Base) {
	if !p.IsSetBase() {
		return MakePaymentRequest_Base_DEFAULT
	}
	return p.Base
}
func (p *MakePaymentRequest) SetLoanId(val *string) {
	p.LoanId = val
}
func (p *MakePaymentRequest) SetAmount(val *int64) {
	p.Amount = val
}
func (p *MakePaymentRequest) SetVersion(val *int32) {
	p.Version = val
}
func (p *MakePaymentRequest) SetBase(val *base.Base) {
	p.Base = val
}

func (p *MakePaymentRequest) IsSetLoanId() bool {
	return p.LoanId != nil
}

func (p *MakePaymentRequest) IsSetAmount() bool {
	return p.Amount != nil
}

func (p *MakePaymentRequest) IsSetVersion() bool {
	return p.Version != nil
}

func (p *MakePaymentRequest) IsSetBase() bool {
	return p.Base != nil
}

func (p *MakePaymentRequest) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MakePaymentRequest(%+v)", *p)
}

var fieldIDToName_MakePaymentRequest = map[int16]string{
	1:   "loan_id",
	2:   "amount",
	100: "version",
	255: "Base",
}

type MakePaymentResponse struct {
	Data     *payment_data.PaymentData `thrift:"data,1,optional" frugal:"1,optional,payment_data.PaymentData" json:"data,omitempty"`
	BaseResp *base.BaseResp            `thrift:"BaseResp,255" frugal:"255,default,base.BaseResp" json:"BaseResp"`
}

func NewMakePaymentResponse() *MakePaymentResponse {
	return &MakePaymentResponse{}
}

func (p *MakePaymentResponse) InitDefault() {
}

var MakePaymentResponse_Data_DEFAULT *payment_data.PaymentData

func (p *MakePaymentResponse) GetData() (v *payment_data.PaymentData) {
	if !p.IsSetData() {
		return MakePaymentResponse_Data_DEFAULT
	}
	return p.Data
}

var MakePaymentResponse_BaseResp_DEFAULT *base.BaseResp

func (p *MakePaymentResponse) GetBaseResp() (v *base.BaseResp) {
	if !p.IsSetBaseResp() {
		return MakePaymentResponse_BaseResp_DEFAULT
	}
	return p.BaseResp
}
func (p *MakePaymentResponse) SetData(val *payment_data.PaymentData) {
	p.Data = val
}
func (p *MakePaymentResponse) SetBaseResp(val *base.BaseResp) {
	p.BaseResp = val
}

func (p *MakePaymentResponse) IsSetData() bool {
	return p.Data != nil
}

func (p *MakePaymentResponse) IsSetBaseResp() bool {
	return p.BaseResp != nil
}

func (p *MakePaymentResponse) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("MakePaymentResponse(%+v)", *p)
}

var fieldIDToName_MakePaymentResponse = map[int16]string{
	1:   "data",
	255: "BaseResp",
}

type BillingEngineService interface {
	CreateCustomer(ctx context.Context, req *CreateCustomerRequest) (r *CreateCustomerResponse, err error)

	IsDelinquent(ctx context.Context, req *IsDelinquentRequest) (r *IsDelinquentResponse, err error)

	CreateLoan(ctx context.Context, req *CreateLoanRequest) (r *CreateLoanResponse, err error)

	GetOutstanding(ctx context.Context, req *GetOutstandingRequest) (r *GetOutstandingResponse, err error)

	MakePayment(ctx context.Context, req *MakePaymentRequest) (r *MakePaymentResponse, err error)
}

type BillingEngineServiceCreateCustomerArgs struct {
	Req *CreateCustomerRequest `thrift:"req,1" frugal:"1,default,CreateCustomerRequest" json:"req"`
}

func NewBillingEngineServiceCreateCustomerArgs() *BillingEngineServiceCreateCustomerArgs {
	return &BillingEngineServiceCreateCustomerArgs{}
}

func (p *BillingEngineServiceCreateCustomerArgs) InitDefault() {
}

var BillingEngineServiceCreateCustomerArgs_Req_DEFAULT *CreateCustomerRequest

func (p *BillingEngineServiceCreateCustomerArgs) GetReq() (v *CreateCustomerRequest) {
	if !p.IsSetReq() {
		return BillingEngineServiceCreateCustomerArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BillingEngineServiceCreateCustomerArgs) SetReq(val *CreateCustomerRequest) {
	p.Req = val
}

func (p *BillingEngineServiceCreateCustomerArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BillingEngineServiceCreateCustomerArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BillingEngineServiceCreateCustomerArgs(%+v)", *p)
}

var fieldIDToName_BillingEngineServiceCreateCustomerArgs = map[int16]string{
	1: "req",
}

type BillingEngineServiceCreateCustomerResult struct {
	Success *CreateCustomerResponse `thrift:"success,0,optional" frugal:"0,optional,CreateCustomerResponse" json:"success,omitempty"`
}

func NewBillingEngineServiceCreateCustomerResult() *BillingEngineServiceCreateCustomerResult {
	return &BillingEngineServiceCreateCustomerResult{}
}

func (p *BillingEngineServiceCreateCustomerResult) InitDefault() {
}

var BillingEngineServiceCreateCustomerResult_Success_DEFAULT *CreateCustomerResponse

func (p *BillingEngineServiceCreateCustomerResult) GetSuccess() (v *CreateCustomerResponse) {
	if !p.IsSetSuccess() {
		return BillingEngineServiceCreateCustomerResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BillingEngineServiceCreateCustomerResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateCustomerResponse)
}

func (p *BillingEngineServiceCreateCustomerResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BillingEngineServiceCreateCustomerResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BillingEngineServiceCreateCustomerResult(%+v)", *p)
}

var fieldIDToName_BillingEngineServiceCreateCustomerResult = map[int16]string{
	0: "success",
}

type BillingEngineServiceIsDelinquentArgs struct {
	Req *IsDelinquentRequest `thrift:"req,1" frugal:"1,default,IsDelinquentRequest" json:"req"`
}

func NewBillingEngineServiceIsDelinquentArgs() *BillingEngineServiceIsDelinquentArgs {
	return &BillingEngineServiceIsDelinquentArgs{}
}

func (p *BillingEngineServiceIsDelinquentArgs) InitDefault() {
}

var BillingEngineServiceIsDelinquentArgs_Req_DEFAULT *IsDelinquentRequest

func (p *BillingEngineServiceIsDelinquentArgs) GetReq() (v *IsDelinquentRequest) {
	if !p.IsSetReq() {
		return BillingEngineServiceIsDelinquentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BillingEngineServiceIsDelinquentArgs) SetReq(val *IsDelinquentRequest) {
	p.Req = val
}

func (p *BillingEngineServiceIsDelinquentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BillingEngineServiceIsDelinquentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BillingEngineServiceIsDelinquentArgs(%+v)", *p)
}

var fieldIDToName_BillingEngineServiceIsDelinquentArgs = map[int16]string{
	1: "req",
}

type BillingEngineServiceIsDelinquentResult struct {
	Success *IsDelinquentResponse `thrift:"success,0,optional" frugal:"0,optional,IsDelinquentResponse" json:"success,omitempty"`
}

func NewBillingEngineServiceIsDelinquentResult() *BillingEngineServiceIsDelinquentResult {
	return &BillingEngineServiceIsDelinquentResult{}
}

func (p *BillingEngineServiceIsDelinquentResult) InitDefault() {
}

var BillingEngineServiceIsDelinquentResult_Success_DEFAULT *IsDelinquentResponse

func (p *BillingEngineServiceIsDelinquentResult) GetSuccess() (v *IsDelinquentResponse) {
	if !p.IsSetSuccess() {
		return BillingEngineServiceIsDelinquentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BillingEngineServiceIsDelinquentResult) SetSuccess(x interface{}) {
	p.Success = x.(*IsDelinquentResponse)
}

func (p *BillingEngineServiceIsDelinquentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BillingEngineServiceIsDelinquentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BillingEngineServiceIsDelinquentResult(%+v)", *p)
}

var fieldIDToName_BillingEngineServiceIsDelinquentResult = map[int16]string{
	0: "success",
}

type BillingEngineServiceCreateLoanArgs struct {
	Req *CreateLoanRequest `thrift:"req,1" frugal:"1,default,CreateLoanRequest" json:"req"`
}

func NewBillingEngineServiceCreateLoanArgs() *BillingEngineServiceCreateLoanArgs {
	return &BillingEngineServiceCreateLoanArgs{}
}

func (p *BillingEngineServiceCreateLoanArgs) InitDefault() {
}

var BillingEngineServiceCreateLoanArgs_Req_DEFAULT *CreateLoanRequest

func (p *BillingEngineServiceCreateLoanArgs) GetReq() (v *CreateLoanRequest) {
	if !p.IsSetReq() {
		return BillingEngineServiceCreateLoanArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BillingEngineServiceCreateLoanArgs) SetReq(val *CreateLoanRequest) {
	p.Req = val
}

func (p *BillingEngineServiceCreateLoanArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BillingEngineServiceCreateLoanArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BillingEngineServiceCreateLoanArgs(%+v)", *p)
}

var fieldIDToName_BillingEngineServiceCreateLoanArgs = map[int16]string{
	1: "req",
}

type BillingEngineServiceCreateLoanResult struct {
	Success *CreateLoanResponse `thrift:"success,0,optional" frugal:"0,optional,CreateLoanResponse" json:"success,omitempty"`
}

func NewBillingEngineServiceCreateLoanResult() *BillingEngineServiceCreateLoanResult {
	return &BillingEngineServiceCreateLoanResult{}
}

func (p *BillingEngineServiceCreateLoanResult) InitDefault() {
}

var BillingEngineServiceCreateLoanResult_Success_DEFAULT *CreateLoanResponse

func (p *BillingEngineServiceCreateLoanResult) GetSuccess() (v *CreateLoanResponse) {
	if !p.IsSetSuccess() {
		return BillingEngineServiceCreateLoanResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BillingEngineServiceCreateLoanResult) SetSuccess(x interface{}) {
	p.Success = x.(*CreateLoanResponse)
}

func (p *BillingEngineServiceCreateLoanResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BillingEngineServiceCreateLoanResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BillingEngineServiceCreateLoanResult(%+v)", *p)
}

var fieldIDToName_BillingEngineServiceCreateLoanResult = map[int16]string{
	0: "success",
}

type BillingEngineServiceGetOutstandingArgs struct {
	Req *GetOutstandingRequest `thrift:"req,1" frugal:"1,default,GetOutstandingRequest" json:"req"`
}

func NewBillingEngineServiceGetOutstandingArgs() *BillingEngineServiceGetOutstandingArgs {
	return &BillingEngineServiceGetOutstandingArgs{}
}

func (p *BillingEngineServiceGetOutstandingArgs) InitDefault() {
}

var BillingEngineServiceGetOutstandingArgs_Req_DEFAULT *GetOutstandingRequest

func (p *BillingEngineServiceGetOutstandingArgs) GetReq() (v *GetOutstandingRequest) {
	if !p.IsSetReq() {
		return BillingEngineServiceGetOutstandingArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BillingEngineServiceGetOutstandingArgs) SetReq(val *GetOutstandingRequest) {
	p.Req = val
}

func (p *BillingEngineServiceGetOutstandingArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BillingEngineServiceGetOutstandingArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BillingEngineServiceGetOutstandingArgs(%+v)", *p)
}

var fieldIDToName_BillingEngineServiceGetOutstandingArgs = map[int16]string{
	1: "req",
}

type BillingEngineServiceGetOutstandingResult struct {
	Success *GetOutstandingResponse `thrift:"success,0,optional" frugal:"0,optional,GetOutstandingResponse" json:"success,omitempty"`
}

func NewBillingEngineServiceGetOutstandingResult() *BillingEngineServiceGetOutstandingResult {
	return &BillingEngineServiceGetOutstandingResult{}
}

func (p *BillingEngineServiceGetOutstandingResult) InitDefault() {
}

var BillingEngineServiceGetOutstandingResult_Success_DEFAULT *GetOutstandingResponse

func (p *BillingEngineServiceGetOutstandingResult) GetSuccess() (v *GetOutstandingResponse) {
	if !p.IsSetSuccess() {
		return BillingEngineServiceGetOutstandingResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BillingEngineServiceGetOutstandingResult) SetSuccess(x interface{}) {
	p.Success = x.(*GetOutstandingResponse)
}

func (p *BillingEngineServiceGetOutstandingResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BillingEngineServiceGetOutstandingResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BillingEngineServiceGetOutstandingResult(%+v)", *p)
}

var fieldIDToName_BillingEngineServiceGetOutstandingResult = map[int16]string{
	0: "success",
}

type BillingEngineServiceMakePaymentArgs struct {
	Req *MakePaymentRequest `thrift:"req,1" frugal:"1,default,MakePaymentRequest" json:"req"`
}

func NewBillingEngineServiceMakePaymentArgs() *BillingEngineServiceMakePaymentArgs {
	return &BillingEngineServiceMakePaymentArgs{}
}

func (p *BillingEngineServiceMakePaymentArgs) InitDefault() {
}

var BillingEngineServiceMakePaymentArgs_Req_DEFAULT *MakePaymentRequest

func (p *BillingEngineServiceMakePaymentArgs) GetReq() (v *MakePaymentRequest) {
	if !p.IsSetReq() {
		return BillingEngineServiceMakePaymentArgs_Req_DEFAULT
	}
	return p.Req
}
func (p *BillingEngineServiceMakePaymentArgs) SetReq(val *MakePaymentRequest) {
	p.Req = val
}

func (p *BillingEngineServiceMakePaymentArgs) IsSetReq() bool {
	return p.Req != nil
}

func (p *BillingEngineServiceMakePaymentArgs) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BillingEngineServiceMakePaymentArgs(%+v)", *p)
}

var fieldIDToName_BillingEngineServiceMakePaymentArgs = map[int16]string{
	1: "req",
}

type BillingEngineServiceMakePaymentResult struct {
	Success *MakePaymentResponse `thrift:"success,0,optional" frugal:"0,optional,MakePaymentResponse" json:"success,omitempty"`
}

func NewBillingEngineServiceMakePaymentResult() *BillingEngineServiceMakePaymentResult {
	return &BillingEngineServiceMakePaymentResult{}
}

func (p *BillingEngineServiceMakePaymentResult) InitDefault() {
}

var BillingEngineServiceMakePaymentResult_Success_DEFAULT *MakePaymentResponse

func (p *BillingEngineServiceMakePaymentResult) GetSuccess() (v *MakePaymentResponse) {
	if !p.IsSetSuccess() {
		return BillingEngineServiceMakePaymentResult_Success_DEFAULT
	}
	return p.Success
}
func (p *BillingEngineServiceMakePaymentResult) SetSuccess(x interface{}) {
	p.Success = x.(*MakePaymentResponse)
}

func (p *BillingEngineServiceMakePaymentResult) IsSetSuccess() bool {
	return p.Success != nil
}

func (p *BillingEngineServiceMakePaymentResult) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("BillingEngineServiceMakePaymentResult(%+v)", *p)
}

var fieldIDToName_BillingEngineServiceMakePaymentResult = map[int16]string{
	0: "success",
}
