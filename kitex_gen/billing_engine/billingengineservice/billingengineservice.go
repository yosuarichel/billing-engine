// Code generated by Kitex v0.15.0. DO NOT EDIT.

package billingengineservice

import (
	"context"
	"errors"
	client "github.com/cloudwego/kitex/client"
	kitex "github.com/cloudwego/kitex/pkg/serviceinfo"
	billing_engine "github.com/yosuarichel/billing-engine/kitex_gen/billing_engine"
)

var errInvalidMessageType = errors.New("invalid message type for service method handler")

var serviceMethods = map[string]kitex.MethodInfo{
	"CreateCustomer": kitex.NewMethodInfo(
		createCustomerHandler,
		newBillingEngineServiceCreateCustomerArgs,
		newBillingEngineServiceCreateCustomerResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"IsDelinquent": kitex.NewMethodInfo(
		isDelinquentHandler,
		newBillingEngineServiceIsDelinquentArgs,
		newBillingEngineServiceIsDelinquentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"CreateLoan": kitex.NewMethodInfo(
		createLoanHandler,
		newBillingEngineServiceCreateLoanArgs,
		newBillingEngineServiceCreateLoanResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"GetOutstanding": kitex.NewMethodInfo(
		getOutstandingHandler,
		newBillingEngineServiceGetOutstandingArgs,
		newBillingEngineServiceGetOutstandingResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
	"MakePayment": kitex.NewMethodInfo(
		makePaymentHandler,
		newBillingEngineServiceMakePaymentArgs,
		newBillingEngineServiceMakePaymentResult,
		false,
		kitex.WithStreamingMode(kitex.StreamingNone),
	),
}

var (
	billingEngineServiceServiceInfo                = NewServiceInfo()
	billingEngineServiceServiceInfoForClient       = NewServiceInfoForClient()
	billingEngineServiceServiceInfoForStreamClient = NewServiceInfoForStreamClient()
)

// for server
func serviceInfo() *kitex.ServiceInfo {
	return billingEngineServiceServiceInfo
}

// for stream client
func serviceInfoForStreamClient() *kitex.ServiceInfo {
	return billingEngineServiceServiceInfoForStreamClient
}

// for client
func serviceInfoForClient() *kitex.ServiceInfo {
	return billingEngineServiceServiceInfoForClient
}

// NewServiceInfo creates a new ServiceInfo containing all methods
func NewServiceInfo() *kitex.ServiceInfo {
	return newServiceInfo(false, true, true)
}

// NewServiceInfo creates a new ServiceInfo containing non-streaming methods
func NewServiceInfoForClient() *kitex.ServiceInfo {
	return newServiceInfo(false, false, true)
}
func NewServiceInfoForStreamClient() *kitex.ServiceInfo {
	return newServiceInfo(true, true, false)
}

func newServiceInfo(hasStreaming bool, keepStreamingMethods bool, keepNonStreamingMethods bool) *kitex.ServiceInfo {
	serviceName := "BillingEngineService"
	handlerType := (*billing_engine.BillingEngineService)(nil)
	methods := map[string]kitex.MethodInfo{}
	for name, m := range serviceMethods {
		if m.IsStreaming() && !keepStreamingMethods {
			continue
		}
		if !m.IsStreaming() && !keepNonStreamingMethods {
			continue
		}
		methods[name] = m
	}
	extra := map[string]interface{}{
		"PackageName": "billing_engine",
	}
	if hasStreaming {
		extra["streaming"] = hasStreaming
	}
	svcInfo := &kitex.ServiceInfo{
		ServiceName:     serviceName,
		HandlerType:     handlerType,
		Methods:         methods,
		PayloadCodec:    kitex.Thrift,
		KiteXGenVersion: "v0.15.0",
		Extra:           extra,
	}
	return svcInfo
}

func createCustomerHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*billing_engine.BillingEngineServiceCreateCustomerArgs)
	realResult := result.(*billing_engine.BillingEngineServiceCreateCustomerResult)
	success, err := handler.(billing_engine.BillingEngineService).CreateCustomer(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBillingEngineServiceCreateCustomerArgs() interface{} {
	return billing_engine.NewBillingEngineServiceCreateCustomerArgs()
}

func newBillingEngineServiceCreateCustomerResult() interface{} {
	return billing_engine.NewBillingEngineServiceCreateCustomerResult()
}

func isDelinquentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*billing_engine.BillingEngineServiceIsDelinquentArgs)
	realResult := result.(*billing_engine.BillingEngineServiceIsDelinquentResult)
	success, err := handler.(billing_engine.BillingEngineService).IsDelinquent(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBillingEngineServiceIsDelinquentArgs() interface{} {
	return billing_engine.NewBillingEngineServiceIsDelinquentArgs()
}

func newBillingEngineServiceIsDelinquentResult() interface{} {
	return billing_engine.NewBillingEngineServiceIsDelinquentResult()
}

func createLoanHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*billing_engine.BillingEngineServiceCreateLoanArgs)
	realResult := result.(*billing_engine.BillingEngineServiceCreateLoanResult)
	success, err := handler.(billing_engine.BillingEngineService).CreateLoan(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBillingEngineServiceCreateLoanArgs() interface{} {
	return billing_engine.NewBillingEngineServiceCreateLoanArgs()
}

func newBillingEngineServiceCreateLoanResult() interface{} {
	return billing_engine.NewBillingEngineServiceCreateLoanResult()
}

func getOutstandingHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*billing_engine.BillingEngineServiceGetOutstandingArgs)
	realResult := result.(*billing_engine.BillingEngineServiceGetOutstandingResult)
	success, err := handler.(billing_engine.BillingEngineService).GetOutstanding(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBillingEngineServiceGetOutstandingArgs() interface{} {
	return billing_engine.NewBillingEngineServiceGetOutstandingArgs()
}

func newBillingEngineServiceGetOutstandingResult() interface{} {
	return billing_engine.NewBillingEngineServiceGetOutstandingResult()
}

func makePaymentHandler(ctx context.Context, handler interface{}, arg, result interface{}) error {
	realArg := arg.(*billing_engine.BillingEngineServiceMakePaymentArgs)
	realResult := result.(*billing_engine.BillingEngineServiceMakePaymentResult)
	success, err := handler.(billing_engine.BillingEngineService).MakePayment(ctx, realArg.Req)
	if err != nil {
		return err
	}
	realResult.Success = success
	return nil
}
func newBillingEngineServiceMakePaymentArgs() interface{} {
	return billing_engine.NewBillingEngineServiceMakePaymentArgs()
}

func newBillingEngineServiceMakePaymentResult() interface{} {
	return billing_engine.NewBillingEngineServiceMakePaymentResult()
}

type kClient struct {
	c client.Client
}

func newServiceClient(c client.Client) *kClient {
	return &kClient{
		c: c,
	}
}

func (p *kClient) CreateCustomer(ctx context.Context, req *billing_engine.CreateCustomerRequest) (r *billing_engine.CreateCustomerResponse, err error) {
	var _args billing_engine.BillingEngineServiceCreateCustomerArgs
	_args.Req = req
	var _result billing_engine.BillingEngineServiceCreateCustomerResult
	if err = p.c.Call(ctx, "CreateCustomer", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) IsDelinquent(ctx context.Context, req *billing_engine.IsDelinquentRequest) (r *billing_engine.IsDelinquentResponse, err error) {
	var _args billing_engine.BillingEngineServiceIsDelinquentArgs
	_args.Req = req
	var _result billing_engine.BillingEngineServiceIsDelinquentResult
	if err = p.c.Call(ctx, "IsDelinquent", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) CreateLoan(ctx context.Context, req *billing_engine.CreateLoanRequest) (r *billing_engine.CreateLoanResponse, err error) {
	var _args billing_engine.BillingEngineServiceCreateLoanArgs
	_args.Req = req
	var _result billing_engine.BillingEngineServiceCreateLoanResult
	if err = p.c.Call(ctx, "CreateLoan", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) GetOutstanding(ctx context.Context, req *billing_engine.GetOutstandingRequest) (r *billing_engine.GetOutstandingResponse, err error) {
	var _args billing_engine.BillingEngineServiceGetOutstandingArgs
	_args.Req = req
	var _result billing_engine.BillingEngineServiceGetOutstandingResult
	if err = p.c.Call(ctx, "GetOutstanding", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}

func (p *kClient) MakePayment(ctx context.Context, req *billing_engine.MakePaymentRequest) (r *billing_engine.MakePaymentResponse, err error) {
	var _args billing_engine.BillingEngineServiceMakePaymentArgs
	_args.Req = req
	var _result billing_engine.BillingEngineServiceMakePaymentResult
	if err = p.c.Call(ctx, "MakePayment", &_args, &_result); err != nil {
		return
	}
	return _result.GetSuccess(), nil
}
