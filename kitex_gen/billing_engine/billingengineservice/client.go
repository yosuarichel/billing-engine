// Code generated by Kitex v0.15.0. DO NOT EDIT.

package billingengineservice

import (
	"context"
	client "github.com/cloudwego/kitex/client"
	callopt "github.com/cloudwego/kitex/client/callopt"
	billing_engine "github.com/yosuarichel/billing-engine/kitex_gen/billing_engine"
)

// Client is designed to provide IDL-compatible methods with call-option parameter for kitex framework.
type Client interface {
	CreateCustomer(ctx context.Context, req *billing_engine.CreateCustomerRequest, callOptions ...callopt.Option) (r *billing_engine.CreateCustomerResponse, err error)
	IsDelinquent(ctx context.Context, req *billing_engine.IsDelinquentRequest, callOptions ...callopt.Option) (r *billing_engine.IsDelinquentResponse, err error)
	CreateLoan(ctx context.Context, req *billing_engine.CreateLoanRequest, callOptions ...callopt.Option) (r *billing_engine.CreateLoanResponse, err error)
	GetOutstanding(ctx context.Context, req *billing_engine.GetOutstandingRequest, callOptions ...callopt.Option) (r *billing_engine.GetOutstandingResponse, err error)
	MakePayment(ctx context.Context, req *billing_engine.MakePaymentRequest, callOptions ...callopt.Option) (r *billing_engine.MakePaymentResponse, err error)
}

// NewClient creates a client for the service defined in IDL.
func NewClient(destService string, opts ...client.Option) (Client, error) {
	var options []client.Option
	options = append(options, client.WithDestService(destService))

	options = append(options, opts...)

	kc, err := client.NewClient(serviceInfoForClient(), options...)
	if err != nil {
		return nil, err
	}
	return &kBillingEngineServiceClient{
		kClient: newServiceClient(kc),
	}, nil
}

// MustNewClient creates a client for the service defined in IDL. It panics if any error occurs.
func MustNewClient(destService string, opts ...client.Option) Client {
	kc, err := NewClient(destService, opts...)
	if err != nil {
		panic(err)
	}
	return kc
}

type kBillingEngineServiceClient struct {
	*kClient
}

func (p *kBillingEngineServiceClient) CreateCustomer(ctx context.Context, req *billing_engine.CreateCustomerRequest, callOptions ...callopt.Option) (r *billing_engine.CreateCustomerResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateCustomer(ctx, req)
}

func (p *kBillingEngineServiceClient) IsDelinquent(ctx context.Context, req *billing_engine.IsDelinquentRequest, callOptions ...callopt.Option) (r *billing_engine.IsDelinquentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.IsDelinquent(ctx, req)
}

func (p *kBillingEngineServiceClient) CreateLoan(ctx context.Context, req *billing_engine.CreateLoanRequest, callOptions ...callopt.Option) (r *billing_engine.CreateLoanResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.CreateLoan(ctx, req)
}

func (p *kBillingEngineServiceClient) GetOutstanding(ctx context.Context, req *billing_engine.GetOutstandingRequest, callOptions ...callopt.Option) (r *billing_engine.GetOutstandingResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.GetOutstanding(ctx, req)
}

func (p *kBillingEngineServiceClient) MakePayment(ctx context.Context, req *billing_engine.MakePaymentRequest, callOptions ...callopt.Option) (r *billing_engine.MakePaymentResponse, err error) {
	ctx = client.NewCtxWithCallOptions(ctx, callOptions)
	return p.kClient.MakePayment(ctx, req)
}
